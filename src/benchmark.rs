use std::time::Instant;

use image::{open, GrayImage};

use crate::{
    depth_sense::{depth_sense, depth_sense_rayon},
    general::Block,
};

const ROOT_PATH: &str = r"C:\Users\zakgr\Desktop\stereo-depth\src\images\";

pub fn benchmark() {
    println!("Loading images...");

    let time = Instant::now();
    let image_l = unwrap_image_gray(ROOT_PATH.to_owned() + "left_ready.png");
    let image_r = unwrap_image_gray(ROOT_PATH.to_owned() + "right_ready.png");
    println!("Images Loaded: {}s", time.elapsed().as_secs_f64());

    println!("Begin Single Thread...");
    let time = Instant::now();
    let depth_image = depth_sense(
        &image_l,
        &image_r,
        Block {
            width: 10,
            height: 10,
        },
        250,
    );
    println!("Single Thread: {}s", time.elapsed().as_secs_f64());

    // for cores in 2..=100 {
    //     // println!("Begin Multi Thread ({} cores)...", cores);
    //     let time = Instant::now();
    //     let depth_image_multi_threaded = depth_sense_rayon(
    //         &image_l,
    //         &image_r,
    //         Block {
    //             width: 20,
    //             height: 20,
    //         },
    //         250,
    //         cores,
    //     );

    //     println!(
    //         "Multi Thread ({} cores): {}s",
    //         cores,
    //         time.elapsed().as_secs_f64()
    //     );
    //     // println!("{}", depth_image_multi_threaded.to_vec()[0]);
    // }

    depth_image
        .save(ROOT_PATH.to_owned() + "final_depth.png")
        .unwrap();
}

fn unwrap_image_gray(path: String) -> Box<GrayImage> {
    Box::new(open(path).unwrap().as_mut_luma8().unwrap().to_owned())
}
// (1, 2.9793123s)
// (2, 1.4552547s)
// (3, 0.9603844s)
// (4, 0.7271903s)
// (5, 0.6001087s)
// (6, 0.5068079s)
// (7, 0.6092562s)
// (8, 0.5468339s)
// (9, 0.5232775s)
// (10, 0.4930011s)
// (11, 0.4550848s)
// (12, 0.4584584s)
// (13, 0.6507153s)
// (14, 0.6145443s)
// (15, 0.5460158s)
// (16, 0.5651621s)
// (17, 0.5701579s)
// (18, 0.5491481s)
// (19, 0.5293869s)
// (20, 0.5040557s)
// (21, 0.5719876s)
// (22, 0.5621736s)
// (23, 0.5438009s)
// (24, 0.4724332s)
// (25, 0.548457s)
// (26, 0.5147323s)
// (27, 0.5466682s)
// (28, 0.5213669s)
// (29, 0.5350896s)
// (30, 0.5077816s)
// (31, 0.4766597s)
// (32, 0.4671335s)
// (33, 0.4880135s)
// (34, 0.4618586s)
// (35, 0.485543s)
// (36, 0.4608897s)
// (37, 0.5237237s)
// (38, 0.5004726s)
// (39, 0.4924155s)
// (40, 0.5024159s)
// (41, 0.4945576s)
// (42, 0.4951928s)
// (43, 0.4787661s)
// (44, 0.4805047s)
// (45, 0.5024347s)
// (46, 0.4715798s)
// (47, 0.4644019s)
// (48, 0.4649102s)
// (49, 0.510459s)
// (50, 0.5020172s)
// (51, 0.4901539s)
// (52, 0.4903236s)
// (53, 0.4983142s)
// (54, 0.4724056s)
// (55, 0.4697151s)
// (56, 0.4728164s)
// (57, 0.4628252s)
// (58, 0.521061s)
// (59, 0.517668s)
// (60, 0.5115191s)
// (61, 0.5110543s)
// (62, 0.5013125s)
// (63, 0.4951855s)
// (64, 0.5342747s)
// (65, 0.5279123s)
// (66, 0.5111203s)
// (67, 0.4648944s)
// (68, 0.4588441s)
// (69, 0.471055s)
// (70, 0.4695167s)
// (71, 0.4523307s)
// (72, 0.4618395s)
// (73, 0.4728693s)
// (74, 0.4792574s)
// (75, 0.4660335s)
// (76, 0.4707134s)
// (77, 0.4580319s)
// (78, 0.4592371s)
// (79, 0.4713461s)
// (80, 0.4598842s)
// (81, 0.4534512s)
// (82, 0.4539893s)
// (83, 0.4600174s)
// (84, 0.4608663s)
// (85, 0.4657478s)
// (86, 0.4766816s)
// (87, 0.4672133s)
// (88, 0.4652925s)
// (89, 0.4582371s)
// (90, 0.4562151s)
// (91, 0.46541s)
// (92, 0.4655897s)
// (93, 0.4502606s)
// (94, 0.4553623s)
// (95, 0.4559489s)
// (96, 0.4802933s)
// (97, 0.4613528s)
// (98, 0.4635174s)
// (99, 0.4588718s)
// (100, 0.4627429s)

// 1 step

// 1 5.4136209s
// 2 2.5923711000000003s
// 3 1.7358883s
// 4 1.3408961s
// 5 1.118281s
// 6 1.118395s
// 7 1.2206169s
// 8 1.1440699s
// 9 1.0472301s
// 10 1.0025561s
// 11 1.0315226s
// 12 0.9815718s
// 13 1.1644965s
// 14 1.1355784s
// 15 1.1024225s
// 16 1.0305318s
// 17 0.9624053s
// 18 1.0031198s
// 19 0.9880898s
// 20 0.9571222s
// 21 1.0015158s
// 22 1.0178649s
// 23 0.9797691s
// 24 0.9916504s
// 25 1.0623012s
// 26 1.0318033s
// 27 0.9866702s
// 28 0.9863473s
// 29 0.9671507s
// 30 0.9598972s
// 31 0.9246948s
// 32 0.8995018s
// 33 0.8948053s
// 34 0.912074s
// 35 0.9049518s
// 36 0.9304418s
// 37 0.9735047s
// 38 0.983356s
// 39 0.9677283s
// 40 0.9681007s
// 41 0.9884129s
// 42 0.9520298s
// 43 0.9728474s
// 44 0.9283775s
// 45 0.9778272s
// 46 0.9736918s
// 47 0.9712393s
// 48 0.9851483s
// 49 0.9661794s
// 50 0.9719211s
// 51 0.9461678s
// 52 0.9445252s
// 53 0.9474652s
// 54 0.9898456s
// 55 0.9685802s
// 56 0.9792113s
// 57 0.9532557s
// 58 0.9616126s
// 59 0.9664167s
// 60 0.946539s
// 61 0.9315631s
// 62 0.9450788s
// 63 0.9225702s
// 64 0.9376356s
// 65 0.9661118s
// 66 0.9674598s
// 67 0.9759839s
// 68 0.9541488s
// 69 0.9582343s
// 70 0.9494116s
// 71 0.9332795s
// 72 0.9473094s
// 73 0.9468501s
// 74 0.9185282s
// 75 0.9544729s
// 76 0.9603521s
// 77 0.9341702s
// 78 0.9478627s
// 79 0.9311588s
// 80 0.9445755s
// 81 0.9264118s
// 82 0.946601s
// 83 0.9266784s
// 84 0.9245197s
// 85 0.9062637s
// 86 0.9089111s
// 87 0.9319679s
// 88 0.9256823s
// 89 0.933432s
// 90 0.9472795s
// 91 0.9459366s
// 92 0.9433447s
// 93 0.9388055s
// 94 0.9400637s
// 95 0.9566984s
// 96 0.924198s
// 97 0.911838s
// 98 0.8874496s
// 99 0.949177s
// 100 0.9800867s
